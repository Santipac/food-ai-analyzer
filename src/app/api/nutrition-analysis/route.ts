import { User } from '@/interfaces/user';
import { openai } from '@ai-sdk/openai';
import { generateText } from 'ai';
import { NextResponse } from 'next/server';

export const runtime = 'edge';
export const maxDuration = 60;

const nutritionSystemPrompt = `You are an expert nutritionist. When a user tells you what they ate, analyze it.
**It is crucial that your entire response, including all text values within the JSON (micronutrient names, tips, and error messages), is in the SAME LANGUAGE as the user's query. If the user's language is not English or Spanish, translate the response to English always.**
ALWAYS respond with a valid JSON string and nothing else. Do not include any explanatory text before or after the JSON object.
The JSON string must conform to the following structure:
{
  "dishName": "string - name of the dish or food described by the user (in user's language)",
  "calories": "number - total estimated calories as a whole number (e.g., 450)",
  "macros": {
    "protein": { "grams": "number - e.g., 25", "percentage": "number - e.g., 22 (representing 22%)" },
    "carbs": { "grams": "number - e.g., 50", "percentage": "number - e.g., 44 (representing 44%)" },
    "fat": { "grams": "number - e.g., 15", "percentage": "number - e.g., 34 (representing 34%)" },
    "fiber": { "grams": "number - e.g., 8" }
  },
  "micronutrients": [
    { "name": "string - e.g., Vitamin C (in user's language)", "amount": "string - e.g., '75mg'", "dailyValue": "number - e.g., 83 (representing 83% of DV)" }
  ],
  "tips": ["string - a list of nutrition tips or recommendations (in user's language)"],
  "healthScore": "number - a score between 0 and 100 indicating the healthiness of the meal (e.g., 75)"
}
If the user's query is not about food, nutrition, or what they ate, respond with a JSON string like (ensure the error message is also in the user's language):
{
  "error": "I can only help with nutrition-related queries. Please ask about food."
}
Ensure your entire response is only the JSON string, starting with { and ending with }. Double-check that all string content and numerical estimations are accurate and in the user's language where applicable. The percentages for macros should represent their contribution to the total calories. DailyValue for micronutrients should be a numerical percentage. All numbers should be actual numeric types in the JSON, not strings.`;

interface NutritionAnalysisPayload {
    messages: { role: string; content: string }[];
    user: User;
}

export async function POST(req: Request) {
    try {
        const { messages, user } = await req.json() as NutritionAnalysisPayload;

        if (!messages || !Array.isArray(messages) || messages.length === 0) {
            return NextResponse.json({ error: 'No messages provided' }, { status: 400 });
        }

        const userMessages = messages.filter(m => m.role === 'user');
        const lastUserMessage = userMessages.length > 0 ? userMessages[userMessages.length - 1] : null;

        if (!lastUserMessage || !lastUserMessage.content) {
            return NextResponse.json({ error: 'No user message content found to analyze.' }, { status: 400 });
        }

        const result = await generateText({
            model: openai('gpt-3.5-turbo'),
            system: nutritionSystemPrompt + `Also you must have in mind that the user is ${user.gender}, ${user.age} years old, ${user.height} ${user.heightUnit} tall and ${user.weight} ${user.weightUnit} heavy, his fitness objective is ${user.fitnessObjective} and his training frequency is ${user.trainingFrequency}. Use this information to provide more accurate and personalized nutrition analysis and tips.`,
            prompt: lastUserMessage.content,
            temperature: 0.4,
        });

        // We need to parse the text generated by the LLM, since we asked it to be a JSON string.
        try {
            const jsonResponse = JSON.parse(result.text);
            return NextResponse.json(jsonResponse);
        } catch (parseError) {
            console.error('Failed to parse LLM response as JSON:', parseError);
            console.error('LLM Raw Response:', result.text);
            return NextResponse.json(
                { error: 'Failed to process nutrition analysis. The AI response was not valid JSON.', rawResponse: result.text },
                { status: 500 }
            );
        }

    } catch (error) {
        console.error('Error in nutrition-analysis API:', error);
        let errorMessage = 'An unknown error occurred';
        if (error instanceof Error) {
            errorMessage = error.message;
        }
        return NextResponse.json({ error: 'Failed to get nutrition analysis', details: errorMessage }, { status: 500 });
    }
} 